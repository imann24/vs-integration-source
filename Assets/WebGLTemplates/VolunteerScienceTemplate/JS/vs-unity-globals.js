/**
 * @author: Isaiah Mann
 * @desc: Contains global variables which are used on both the player and host logic for integrating Unity with Volunteer Science
 */

// Constant values used for communication between Volunteer Science and Unity
var FETCH_KEY = "vs_fetch";
var SUBMIT_KEY = "vs_submit";
var COMPLETE_KEY = "vs_complete";
var SET_KEY = "vs_set";
var ROUND_KEY = "vs_round";
var PLAYER_ID_KEY = "vs_player_id";
var PLAYER_NAME_KEY = "vs_player_name";
var PLAYER_COUNT_KEY = "vs_player_count";
var SEED_KEY = "vs_seed";
var INIT_KEY = "vs_init";
var CONSUMABLES_KEY = "vs_consumables";
var SET_CONSUMABLES_KEY = "vs_set_consumables";

// Multipart messages passed to the Volunteer Science host are separated by this char:
// e.g. "part1:part2:part3"
var JOIN_CHAR = ":";

// Determines event type based on if the event data contains the string corresponding to one of the constant keys:

// Fetch event is for returning data from Volunteer Science
function isFetchEvent(eventData)
{
     return eventData.includes(FETCH_KEY);
}

// Submit event is for sending data to Volunteer Science
function isSubmitEvent(eventData)
{
     return eventData.includes(SUBMIT_KEY);
}

// Complete event informs Volunteer Science the experiment has been completed
function isCompleteEvent(eventData)
{
	return eventData == COMPLETE_KEY;
}

// Set event sets a variable in Volunteer Science, (only usable for certain parameters, e.g. experiment round)
function isSetEvent(eventData)
{
	return eventData.includes(SET_KEY);
}

// Round events set or fetch the current round of the Experiment
function isRoundEvent(eventData)
{
	return eventData.includes(ROUND_KEY);
}

// Events related to retrieving information about the player's ID
function isPlayerIDEvent(eventData)
{
     return eventData.includes(PLAYER_ID_KEY);
}

// Events related to retrieving information about the player's name
function isPlayerNameEvent(eventData)
{
     return eventData.includes(PLAYER_NAME_KEY);
}

// Events related to the number of players in gameObject
function isPlayerCountEvent(eventData)
{
     return eventData.includes(PLAYER_COUNT_KEY);
}

// Events related to fetching the random seed generated by Volunteer Science for this experiment instance
function isSeedEvent(eventData)
{
     return eventData.includes(SEED_KEY);
}

// An init event is used when Volunteer Science calls initialize() on the experiment
function isInitEvent(eventData)
{
     return eventData.includes(INIT_KEY);
}

// Functions related to getting consumables
function isGetConsumablesEvent(eventData)
{
     return eventData.includes(CONSUMABLES_KEY);
}

// Functions related to setting consumables
function isSetConsumablesEvent(eventData)
{
     return eventData.includes(SET_CONSUMABLES_KEY);
}

// Takes in an array of arguments and joins them with the JOIN_CHAR
function formatArguments(arguments)
{
     return arguments.join(JOIN_CHAR);
}

// Parses a string into a list of arguments
function parseArguments(argumentsStr)
{
     return argumentsStr.split(JOIN_CHAR);
}
